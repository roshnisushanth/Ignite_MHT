<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <link href="Content/dialpad.css" rel="stylesheet" type="text/css" />
    <style>
        .btn_standard {
    background-color: #FFCB05;
    width: auto;
    height: 30px;
    min-width: 120px;
    font-size: 14px;
    font-weight: 600 !important;
    border: 0px;
    color: #000;
    padding: 5px;
    margin: 10px;
}
    </style>
</head>
<body onunload="Quit()">
    <script src="Scripts/dialpad.js" type="text/javascript"></script>
    <center>
        <div style="width: 350px; height: 100px;">
            <div id="main-wrapper">
                <section role="main">
                    <div class="dialPad compact">
                        <div class="number"></div>
                        <div class="dials">
                            <ol>
                                <li class="digits">
                                    <p><strong>1</strong><br /><sup style="visibility:hidden;">abc</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>2</strong><br /><sup>abc</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>3</strong><br /><sup>def</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>4</strong><br /><sup>ghi</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>5</strong><br /><sup>jkl</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>6</strong><br /><sup>mno</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>7</strong><br /><sup>pqrs</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>8</strong><br /><sup>tuv</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>9</strong><br /><sup>wxyz</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>*</strong><br /><sup style="visibility:hidden;">abc</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>0</strong><br /><sup class="plussymbol">+</sup></p>
                                </li>
                                <li class="digits">
                                    <p><strong>#</strong><br /><sup style="visibility:hidden;">abc</sup></p>
                                </li>
                                <li class="digits pad-action-close pad-dark">
                                    <p><strong><i class="icon-refresh icon-large"> </i></strong><sup style="visibility:hidden;">clear</sup> </p>
                                    <!-- <img id="imgendcall" src="Images/close-icon.png" title="Close dial pad" />-->

                                </li>
                                <li class="digits pad-action pad-dark">
                                    <p>
                                        <strong>
                                            <i class="icon-action">
                                                <img id="imgcall" src="Images/call_connect.png" title="Call" />
                                                <button type="button" class="phone-pop" data-toggle="modal" data-target="#myModalAudio"> <img id="imgendcall" src="Images/call_disconnect.png" title="End Call" style="display:none;" />
                                                </button></i>
                                        </strong>
                                    </p>
                                </li>
                                <li class="digits pad-dark">
                                    <p><strong><i class="icon-action"><img src="Images/backspace.png" title="Delete" /></i></strong></p>
                                </li>

                            </ol>
                        </div>
                        <span id="spnaudiocalltimer"></span>
                    </div>
                </section>
            </div>
        </div>


        <input type="hidden" id="InitiateMSGDate" style="display:none" value="" />
        <!--<div id="myModalAudio" class="modal fade session" role="dialog">
            <div class="modal-dialog">

                 Modal content
                <div class="modal-content">
                        <div class="modal-header">

                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">End Session</h4>
                        </div>
                        <div class="modal-body">
                            <p>Your current audio call session has ended. Please enter any session notes (optional).</p>

                            <p class="does-ses">
                                <span style="color:#ff0000;">*</span>Does this session qualify as an encounter?

                                <span class="yse">
                                    <input type="radio" id="audio_radio_yes" name="session" checked="checked" value="Yes" /> Yes
                                </span>
                                <span class="yse">
                                    <input type="radio" name="session" id="audio_radio_no" value="NO" /> No

                                </span>
                            </p>
                            <textarea placeholder="Enter text" id="txtAudioSessionNote"></textarea>
                        </div>
                        <div class="modal-footer">

                            <div class="popup_conter" style="text-align:center;">
                                <input type="submit" name="save_User" value="Save" id="Audio_Save_User" class="btn_standard" />
                                <input type="button" id="cancel_audio_popup" class="btn_standard close" data-dismiss="modal" value="Cancel" />
                            </div>

                        </div>
                </div>

            </div>
        </div>-->

       <script type="text/javascript">

           $('#cancel_audio_popup').click(function () {
               $("#myModalAudio").dialog('close');
           });
           
       </script>

        <!--  Zoiper web phone integration starts-->
        <script type="text/javascript">
            var Zoiper;
            var _audioCallStartTime = '';
            var audioCalleventTimer;
            var audioTimer = 0;


            //The variable "ActiveCall" is used to keep a reference to the current active "Call" object
            var ActiveCall;
            //The function GetValue is a helper function used to get the value of a document element by its ID -->
            function GetValue(name) {
                return document.getElementById(name).value;
            }
            //The function "Quit" is used to stop Zoiper Web, we will use it to delete the items we have created during the example -->
            function Quit() {
                Status("Quit() called");
                if (Zoiper != null) {
                    Zoiper.DelContact("web demo");
                    Zoiper.DelAccount("Sample");
                }
                //On Firefox new instances of the plugin are created before old ones are destroyed Because of this we must manually destroy the existing plugin -->
                document.getElementById('ZoiperA').innerHTML = "";
            }
            //The function "Hang" is a helper function and is used to hangup the "ActiveCall" that we keep reference of -->
            function Hang() {
                if (null != ActiveCall) {
                    ActiveCall.Hang();
                    ActiveCall = null;
                }
            }
            //The function "Dial" is used to dial a number entered by the user in the input field with ID="number". It also assigns the newly created "Call" object to the "ActiveCall" variable -->
            function Dial() {
                //                    ActiveCall = Zoiper.Dial(GetValue("number"));
                ActiveCall = Zoiper.Dial($(".number").html().trim());
            }
            //The function "Hold" is used to put the current active call on hold -->
            function Hold() {
                if (null != ActiveCall)
                    ActiveCall.Hold();
            }
            //The function "SendDTMFSequence" sends a sequence of dtmf digits entered in the input area named "dtmfsequence" -->
            function SendDTMFSequence() {
                if (null != ActiveCall) {
                    ActiveCall.SendDTMF(GetValue("dtmfsequence"));
                }
            }
            //The function "ShowAudioWizard" is used to show audio wizard dialog -->
            function ShowAudioWizard() {
                if (null != Zoiper) {
                    Zoiper.ShowAudioWizard();
                }
            }
            //The function "ShowLog" is used to show log dialog -->
            function ShowLog() {
                if (null != Zoiper) {
                    Zoiper.ShowLog();
                }
            }
            //The function "MuteSpeakerToggle" is used to enable and disable audio output -->
            function MuteSpeakerToggle() {
                if (Zoiper.MuteSpeaker == "true")
                    Zoiper.MuteSpeaker = "false";
                else
                    Zoiper.MuteSpeaker = "true";
            }
            //The function "MuteMicToggle" is used to enable and disable audio input -->
            function MuteMicToggle() {
                if (Zoiper.MuteMicrophone == "true")
                    Zoiper.MuteMicrophone = "false";
                else
                    Zoiper.MuteMicrophone = "true";
            }
            //The function "Login" is used to login the user to the Zoiper Service. It uses the username and password provided by the user in the input fields "user" and "pass" -->
            function Login() {
                var user = GetValue("user");
                var pass = GetValue("pass");
                Zoiper.Login(user, pass);
            }
            //The function "Logout" is used to logout the user from the Zoiper Service. -->
            function Logout() {
                Zoiper.Logout();
            }
            //The function "Status" is used to show a status text in the element with ID="Status". It is used as a log function to show the state of the phone and what events are triggered -->
            function Status(text) {

                var node = document.getElementById("thelog");
                node.value += text + "\n";

                if (text.indexOf('ring') != -1) {
                    $("#imgendcall").show();
                    $("#imgcall").hide();
                    _audioCallStartTime = '';
                }
                else if (text.indexOf('hang') != -1) {

                    $("#imgendcall").hide();
                    $("#imgcall").show();
                    //                    _audioCallStartTime = new Date().toUTCString();
                    stopAudioCallTimer();

                    if (_audioCallStartTime != '') {
                        saveAudioCallLog();
                        $("#spnaudiocalltimer").html("");
                    }
                    $('.new-pop').addClass('man');
                    var initiateMSGDateTime = new Date();
                    initiateMSGDateTime = moment(initiateMSGDateTime).format('YYYY-MM-DD HH:mm:ss');
                    if ($('#InitiateMSGDate').val() == "") {
                        $('#InitiateMSGDate').val(initiateMSGDateTime);
                    }


                }
                else if (text.indexOf('incoming') != -1) {
                    $("#imgendcall").hide();
                    $("#imgcall").show();
                }
                else if (text.indexOf('accept') != -1) {
                    $("#imgendcall").show();
                    $("#imgcall").hide();
                    _audioCallStartTime = new Date().toUTCString();
                    if (_audioCallStartTime != '') {
                        startAudioCallTimer();
                    }
                }
            }
            //The function "OnZoiperReady" is the entry point for Zoiper Web usage. It is called by Zoiper Web when it is ready for use. It provides a reference to its "Phone" object which we assign to the "Zoiper" variable. We use it to make the initial setup -->
            function OnZoiperReady(phone) {
                //We clear the log input box -->
                document.getElementById("thelog").value = "";
                //We put the Zoiper Web instance reference to the global variable "Zoiper"-->
                Zoiper = phone;
                //Here we allow other Zoiper Web instances in different processes to be loaded if necessary-->
                Zoiper.AllowMultipleInstances();
                //We print the version of the Zoiper Web instance we are running -->
                Status("Version : " + Zoiper.Version);
                //Here we get the "Config" object instance and put it in the variable named Config-->
                var Config = Zoiper.GetConfig();
                //Here we change the SIP and IAX listening ports-->
                Config.SetSIPIAXPorts("4566", "5061");
                //Here we restrict the number of simultaneous calls allowed to 2 -->
                Config.NumberOfCallsLimit("2");
                //Here we set some general configuration properties. We disable the popup menu on incoming calls  and we set the debug log to be  written to  “D:\” and enable it-->
                Config.PopupMenuOnIncomingCall = "false";
                //                Config.DebugLogPath = "d:\\";
                Config.EnableDebugLog = "false";
                //Here we setup Zoiper Web not to ring when the user is already on the phone-->
                Config.RingWhenTalking = "false";
                //Here we create or get an existing "Account" object called "Sample". The "Account" is going to use the SIP protocol -->
                Account = Zoiper.AddAccount("Sample", "sip");
                //Here we set the "Account" properties -->
                Account.Domain = "asterisk.networkextreme.net";
                Account.CallerID = "316";
                Account.UserName = "316";
                Account.Password = "garage123$";
                //Here we set the “Account” to use inband DTMF signals -->
                Account.DTMFType = "media_inband";
                //Here we apply the so far set properties and register the "Account" -->
                Account.Apply();
                Account.Register();
                //Here we enable the SIP header dump-->
                Account.SipHeaderDump("true");
                //Here we set a custom header named "testheader" to be send in the calls that are using this account. First we set it to "zoiperweb" then we clear it and then add two headers with the same name set to "value1" and "value2"-->
                Account.SipHeaderAdd("testheader", "zoiperweb");
                Account.SipHeaderClear("testheader");
                Account.SipHeaderAdd("testheader", "value1");
                Account.SipHeaderAdd("testheader", "value2");
                //Here we select the "Sample" "Account" to be the active one -->
                Zoiper.UseAccount("Sample");
                //Here we create a new "Contact" object with primary number "web demo" and set its properties -->
                var Contact = Zoiper.AddContact("web demo");
                Contact.Account = "Sample";
                Contact.Display = "web demo display";
                Contact.FirstName = "John";
                Contact.MiddleName = "F.";
                Contact.LastName = "Doe";
                Contact.Country = "Alabama";
                Contact.City = "Huntsville";
                Contact.WorkPhone = "work";
                Contact.HomePhone = "home";
                Contact.CellPhone = "cell";
                Contact.FaxNumber = "fax";
                Contact.Apply();
            }
            //Here we have a simple implementation of the available "Callback" functions -->
            function OnZoiperCallFail(call) {
                Status(call.Phone + " failed");
            }
            function OnZoiperCallRing(call) {
                Status(call.Phone + " ring");
            }
            function OnZoiperCallHang(call) {

                Status(call.Phone + " hang");
            }
            function OnZoiperCallHold(call) {
                Status(call.Phone + " hold");
            }
            function OnZoiperCallUnhold(call) {
                Status(call.Phone + " unhold");
            }
            function OnZoiperCallAccept(call) {
                Status(call.Phone + " accept");
            }
            function OnZoiperCallReject(call) {
                Status(call.Phone + " reject");
            }
            function OnZoiperCallIncoming(call) {
                call.Reject();
                // Status(call.Phone + " incoming");
            }
            function OnZoiperAccountRegister(account) {
                Status(account.Name + " is registered");
            }
            function OnZoiperAccountUnregister(account) {
                Status(account.Name + " is unregistered");
            }
            function OnZoiperAccountRegisterFail(account) {
                Status(account.Name + " failed to register");
            }
            function OnZoiperContactStatus(contact, status) {
                Status(contact.Name + " is " + status);
            }
            function OnZoiperCallSipHeader(call, sip) {
                Status("SIP header counts: " + sip.Count);
                //This fragment of code demonstrates how to display a specific SIP header (in this case the "allow" header) -->
                var property = sip.Entry("allow");
                if (null != property) {
                    for (var j = 0; j < property.Count; j++) {
                        Status(" Allow: " + property.Value(j));
                    }
                }
                //This fragment of code demonstrates how to display all SIP headers -->
                for (var i = 0; i < sip.Count; i++) {
                    var property = sip.Entry(i);
                    Status("Header label: " + property.Name);
                    for (var j = 0; j < property.Count; j++) {
                        Status("     value: " + property.Value(j));
                    }
                }
            }
        </script>
        <!-- Here we define the HTML elements we are going to need in this example -->
        <div id="divzoiperwebphone" style="display: none;">
            <table border="1" width="100%">
                <tr>
                    <td rowspan="10">
                        <textarea id="thelog" rows="20" cols="40"></textarea>
                    </td>
                </tr>
                <!-- <tr>
                    <td width="100%">
                        Number&nbsp;<input id="number" type="text" />
                        <button onclick="Dial()">
                            Dial</button>
                        <button onclick="Hold()">
                            Hold</button>
                        <button onclick="Hang()">
                            Hang</button>
                    </td>
                </tr>
                <tr>
                    <td width="100%">
                    </td>
                </tr>
                <tr>
                    <td width="100%">
                        <button onclick="ShowAudioWizard()">
                            Show Audio Wizard</button>
                        <button onclick="ShowLog()">
                            Show Log</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        <button onclick="MuteMicToggle()">
                            Mute Mic</button>
                        <button onclick="MuteSpeakerToggle()">
                            Mute Speaker</button>
                    </td>
                </tr>
                <tr>
                    <td>
                        &nbsp;
                    </td>
                </tr>
                <tr>
                    <td>
                        &nbsp;
                    </td>
                </tr>
                <tr>
                    <td>
                        &nbsp;
                    </td>
                </tr>
                <tr>
                    <td>
                        &nbsp;
                    </td>
                </tr>
                <tr>
                    <td>
                        &nbsp;
                    </td>
                </tr>-->
            </table>
        </div>
        <!-- Here we define the <object> tag used by Internet Explorer to include Zoiper Web in the web page. Note that the version info in the "codebase" attribute is very important when a more recent Zoiper Web is available and should be upgraded -->
        <object id="ZoiperA" classid="clsid:BCCA9B64-41B3-4A20-8D8B-E69FE61F1F8B" codebase="http://www.zoiper.com/webphone/InstallerWeb.cab#Version=2,5,0,11285"
                align="left" width="1" height="1">
            <!-- Here we define the <embed> tag used by the NPAPI based browsers (FireFox, etc) to include Zoiper Web in the web page.-->
            <embed id="ZoiperN" type="application/x-zoiper-plugin" align="left" width="0" height="0" />
        </object>
    </center>
    <script type="text/javascript">
        $(document).ready(function () {

            $(".pad-action").click(function () {
                if ($("#imgcall").is(":visible")) {
                    var num = $(".number").html().trim();
                    var chklng = num;
                    var r = num.split("+1");
                    if (r.length > 1) {
                        chklng = r[1];
                    }
                    if (chklng && chklng.length > 0) {
                        // window.location = "skype:" + num + "?call";
                        var chatLists = $('#divcontacttable table tbody');
                        var tabDivLast = $('#divcontacttable table tbody tr').filter('.rowhighlite');
                        var topLastDiv = chatLists.children(':first');
                        topLastDiv.before(tabDivLast);
                        Dial();
                    }
                    else {
                        alert("Please dial the number.");
                    }
                }
                else {
                    Hang();
                    audioCallSession();
                }
            });

            $(".plussymbol").click(function (e) {
                e.stopPropagation();
                $(".number").append("+");
            });

            //            $(".pad-action-close").click(function () {
            //                hideDialerPad();
            //            });
        });
        function saveAudioCallLog() {
            var pNo = $(".number").html();
            $.ajax({
                type: 'POST',
                url: 'Chat.aspx/SaveAudioCallLog',
                data: '{"conversationid":"' + _conversationid + '","initiator":"' + userid + '","answerer":"' + _peerid + '","phoneno":"' + pNo + '","starttime":"' + _audioCallStartTime + '"}',
                contentType: 'application/json; charset=utf-8',
                success: function (res) {

                },
                error: function (err) {
                    alert(err)
                },
                complete: function () {
                    _audioCallStartTime = '';
                    stopAudioCallTimer();
                }
            });

        }
        function startAudioCallTimer() {
            _isaudioCall = true;
            audioCalleventTimer = window.setInterval(function () {
                audioTimer++;
                var hours = parseInt(audioTimer / 3600);
                var minutes = (parseInt(audioTimer / 60)) % 60;
                var seconds = audioTimer % 60;
                $("#spnaudiocalltimer").html(("0" + hours).slice(-2) + ":" + ("0" + minutes).slice(-2) + ":" + ("0" + seconds).slice(-2));

            }, 1000);
        }
        function stopAudioCallTimer() {
            clearInterval(audioCalleventTimer);
            audioTimer = 0;
            _isaudioCall = false;
        }

        //$("#Audio_Save_User").click(function () {
        //    var radioValue = $("input[name='session']:checked").val();
        //    var sessionNote = $('textarea#txtAudioSessionNote').val();
        //    var InitiateMSGDate = $('#InitiateMSGDate').val();
        //    var EndDateTime = new Date();
        //    EndDateTime = moment(EndDateTime).format('YYYY-MM-DD HH:mm:ss');
        //    var dataNotes = { "conversationid": _conversationid, "currentid": userid, "peerid": _peerid, "groupid": 0, "session": radioValue, "sessionNote": sessionNote, "category": 2, "StartDateTime": InitiateMSGDate, "EndDateTime": EndDateTime };
        //    $.ajax({
        //        type: "POST",
        //        url: "HickChatEngine.svc/InsertSessionNote",
        //        //data: JSON.stringify('{"conversationid":"' + _conversationid + '","currentid":"' + userid + '", "peerid":"' + _peerid + '", "groupid":"' + 0 + '", "session":"' + radioValue + '", "sessionNote":"' + sessionNote + '", "category":"' + 2 + '"}'),
        //        data: JSON.stringify(dataNotes),
        //        contentType: "application/json; charset=utf-8",
        //        success: function (msg) {
        //            $("#myModalAudio").dialog('close');
        //        }
        //    });
        //});

    </script>
</body>
</html>
